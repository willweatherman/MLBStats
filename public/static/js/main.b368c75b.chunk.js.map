{"version":3,"sources":["store.js","api.js","components/home.js","components/form.js","app.js","serviceWorker.js","index.js"],"names":["store","createStore","state","action","type","mlb_stats","concat","sort_name","current_list","text","form_wins","form_vg","form_avg","form_losses","toFixed","search_bar","search_section","filter_bar","filter_section","operator","range","start","end","getAllTeams","a","dispatch","fetch","then","response","json","data","arr","parseInt","page","totalPages","Promise","all","map","pageNum","getTeam","pagenum","_embedded","console","log","method","body","JSON","stringify","headers","link","random","Math","teams","mlbData","sortName","stats","i","counter","key","className","onClick","changeSort","info","y","style","backgroundColor","alt","src","trashCans","TeamObj","e","deleteTeam","_links","self","href","replace","alert","team","name","removeTeam","changeList","newList","sortedState","Object","entries","toLowerCase","HomeContainer","connect","mlbStats","searchBar","searchSection","filterBar","filterSection","currentList","props","history","useHistory","filteredState","toString","filter","number","regex","RegExp","match","sort","b","standings","batting","pitching","fielding","push","onChange","section","target","value","id","defaultValue","onInput","length","mlbstats","arrayOfHtml","keyValue","unshift","options","oper","onKeyPress","isNaN","preventDefault","currSection","currentlist","obj","genFields","processForm","ids","values","document","getElementById","removeAttribute","postTeam","inputCity","inputName","inputAbbreviation","inputImgSrc","inputTAB","inputRuns","inputHits","inputARE","inputIPI","inputAH","inputIPL","inputTC","inputFTO","inputWins","inputLosses","inputWLP","FormContainer","CurrentList","FormAvg","htmlFor","hidden","placeholder","val","changeWins","changeLosses","readOnly","App","path","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","rel","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b368c75b.chunk.js","sourcesContent":["import { createStore } from 'redux'\n\nfunction todos(state = {}, action) {\n    switch (action.type) {\n        case 'CLEAR_MLB_STATS':\n            return {\n                ...state,\n                mlb_stats: []\n            }\n        case 'ADD_MLB_STATS':\n            return {\n                ...state,\n                mlb_stats: state.mlb_stats.concat(action.state.mlb_stats),\n            }\n        case 'CHANGE_SORT':\n            return {\n                ...state,\n                sort_name: action.sort_name\n            }\n        case 'CHANGE_LIST':\n            return {\n                ...state,\n                current_list: action.text\n            }\n        case 'UPDATE_AVG':\n            if (state.form_wins === 0) return {\n                ...state,\n                form_vg: 0\n            }\n            return {\n                ...state,\n                form_avg: (state.form_wins / (state.form_wins + state.form_losses)).toFixed(3)\n            }\n        case 'UPDATE_SEARCH_BAR':\n            return {\n                ...state,\n                search_bar: action.text\n            }\n        case 'UPDATE_SEARCH_SECTION':\n            return {\n                ...state,\n                search_section: action.text\n            }\n        case 'UPDATE_FILTER_BAR':\n            return {\n                ...state,\n                filter_bar: action.text\n            }\n        case 'UPDATE_FILTER_SECTION':\n            return {\n                ...state,\n                filter_section: action.text\n            }\n        case 'UPDATE_WINS':\n            return {\n                ...state,\n                form_wins: action.text\n            }\n        case 'UPDATE_LOSSES':\n            return {\n                ...state,\n                form_losses: action.text\n            }\n        case 'UPDATE_OPPERATOR':\n            return {\n                ...state,\n                operator: action.text\n            }\n        default:\n            return state\n    }\n}\nlet store = createStore(todos, {\n    mlb_stats: [],\n    filter_bar: \"\",\n    filter_section: \"wins\",\n    operator: \">\",\n    search_bar: \"\",\n    search_section: \"city\",\n    sort_name: \"city\",\n    current_list: \"Standings\",\n    form_avg: 0,\n    form_wins: 0,\n    form_losses: 0\n})\n\n\n\n\n\nexport default store\n","import store from './store.js'\n\nfunction range(start, end) {\n    if(start === end) return [start];\n    return [start, ...range(start + 1, end)];\n}\n\nexport async function getAllTeams() {\n    await store.dispatch({type: \"CLEAR_MLB_STATS\"})\n    return fetch('/Teams').then((response) => {\n        return response.json();\n    }).then((data) => {\n        const arr = range(0, parseInt(data.page.totalPages))\n        return Promise.all(arr.map(pageNum => {\n            getTeam(pageNum)\n        }))\n    })\n}\n\nasync function getTeam(pagenum = 0) {\n    return fetch('/Teams?page='+ pagenum).then((response) => {\n        return response.json();\n    }).then((data) => {\n        return store.dispatch({type: \"ADD_MLB_STATS\", state: data._embedded})\n    })\n}\nexport async function postTeam(json) {\n    console.log(json)\n    await fetch(\"/Teams\", {\n        method: \"POST\",\n        body: JSON.stringify(json),\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n        }\n    });\n    getAllTeams()\n}\nexport async function deleteTeam(link) {\n    await fetch(link, {\n        method: \"DELETE\",\n        headers: {\n            \"Content-type\": \"application/json; charset=UTF-8\"\n        }\n    })\n    getAllTeams()\n}\n\n\n","import React from 'react';\nimport '../stylesheets/home.css';\nimport { connect } from 'react-redux';\nimport store from \"../store\";\nimport { useHistory } from \"react-router-dom\";\nimport { deleteTeam } from '../api'\n\nfunction random() {\n    return Math.random();\n}\n\n\n// Functions to limit the amount of teams displayed\nfunction filter(stats, filterSection, filterBar, searchSection, searchBar, currentList, operator) {\n    if (stats === []) return stats;\n    //filter...\n    filterBar = (filterBar === '' || filterBar === '0') ? 0 : filterBar.toString().replace(/^0+/, '');\n    stats = stats.filter(team => {\n        const number = team.stats[currentList.toLowerCase()][filterSection]\n        console.log(parseInt(number), operator, filterBar)\n        if (operator === '>') {\n            return (parseInt(number) > filterBar)\n        } else if (operator === '=') {\n            return (parseInt(number) === filterBar)\n        } else {\n            return (parseInt(number) < filterBar)\n        }\n    })\n    //search...\n    return stats.filter(team => {\n        const regex = new RegExp(searchBar, 'gi');\n        return team.team[searchSection.toLowerCase()].match(regex)\n    });\n}\nfunction sort(state, sortName, currentList) {\n    if (state === []) return state;\n    state.sort((a, b) => {\n        if (sortName === \"city\" || sortName === \"name\" || sortName === \"abbreviation\" || sortName === \"officialLogoImageSrc\") return (a.team[sortName].toLowerCase() >= b.team[sortName].toLowerCase()) ? 1 : -1\n        if (currentList === \"Standings\") return (a.stats.standings[sortName] <= b.stats.standings[sortName]) ? 1 : -1\n        if (currentList === \"Batting\") return (a.stats.batting[sortName] <= b.stats.batting[sortName]) ? 1 : -1\n        if (currentList === \"Pitching\") return (a.stats.pitching[sortName] <= b.stats.pitching[sortName]) ? 1 : -1\n        if (currentList === \"Fielding\") return (a.stats.fielding[sortName] <= b.stats.fielding[sortName]) ? 1 : -1\n    })\n\n    return state\n}\n\n\n\n//Function to parse the mlb_stats and return a iterable list and objects\nfunction genFields(mlbStats, currSection) {\n    if (mlbStats == null) return {\"stats\": [], \"info\": []}\n    let stats = []\n    let info = []\n    Object.entries(mlbStats[0].team).map(keyValue => {\n        return stats = stats.concat(keyValue[0])\n    })\n    const currentlist = currSection.toLowerCase()\n    Object.entries(mlbStats[0].stats[currentlist]).map(keyValue => {\n        return stats = stats.concat(keyValue[0])\n    });\n    mlbStats.map(team => {\n        let obj = {};\n        Object.entries(team.team).map(keyValue => {\n            return obj[keyValue[0]] = keyValue[1]\n        });\n        Object.entries(team.stats[currentlist]).map(keyValue => {\n            return obj[keyValue[0]] = keyValue[1]\n        });\n        return info = info.concat(obj)\n    });\n    return {\"stats\": stats, \"info\": info}\n}\n\n\n\n//helper functions to display items on the page\nfunction teams(mlbData, sortName) {\n    return mlbData.stats.map(i => {\n        let counter = 1\n        return (\n            <div key={random()} className=\"Column\">\n                <button onClick={() => {changeSort(i)}} className={\"contentButton \" + (sortName === i ? \"active\": \"\")}>\n                    {i}\n                </button>\n                {\n                    mlbData.info.map(y => {\n                        counter++\n                        return (\n                            <div key={random()} className=\"Field\" style={(counter % 2 === 0 ? {backgroundColor: \"gray\"} : {} )}>\n                                {\n                                    (i === \"officialLogoImageSrc\") ? <img alt=\"\" className=\"Image\" src={y[i]}/> : y[i]\n                                }\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        )\n    })\n}\nfunction trashCans(state) {\n    let counter = 1\n    return state.map( TeamObj =>{\n        counter++\n        return (\n            <div key={random()} className=\"TrashCans Field\" style={(counter % 2 === 0 ? {backgroundColor: \"gray\"} : {} )}>\n                <i onClick={(e) => {removeTeam(e, TeamObj)}} className=\"Clickable fa fa-trash fa-2x\"></i>\n            </div>\n        )\n    })\n}\nfunction options(mlbstats, currentList, filterSection) {\n    let arrayOfHtml = []\n    Object.entries(mlbstats[0].stats[currentList.toLowerCase()]).map(keyValue => {\n        if (keyValue[0] === filterSection) return arrayOfHtml.unshift(<option key={random()} value={keyValue[0]}>{keyValue[0]}</option>)\n        arrayOfHtml.push(<option key={random()} value={keyValue[0]}>{keyValue[0]}</option>)\n    })\n    return arrayOfHtml\n}\n\n\n//Functions that use the dispatch to the store\nfunction searchBar(e) {\n    store.dispatch({type: \"UPDATE_SEARCH_BAR\", text: e.target.value})\n}\n\nfunction searchSection(section) {\n    store.dispatch({type: \"UPDATE_SEARCH_SECTION\", text: section})\n}\n\nfunction filterBar(e) {\n    store.dispatch({type: \"UPDATE_FILTER_BAR\", text: e.target.value})\n}\n\nfunction filterSection(section) {\n    store.dispatch({type: \"UPDATE_FILTER_SECTION\", text: section})\n}\n\nfunction changeOperator(oper) {\n    store.dispatch({type: \"UPDATE_OPPERATOR\", text: oper})\n}\nfunction changeSort(i) {\n    store.dispatch({type: \"CHANGE_SORT\", sortName: i})\n}\nfunction changeList(newList, sortedState) {\n    store.dispatch({type: \"CHANGE_LIST\", text: newList})\n    store.dispatch({type: \"UPDATE_FILTER_SECTION\", text: Object.entries(sortedState[0].stats[newList.toLowerCase()])[0][0]})\n}\n\n//Helper function to delete a team\nfunction removeTeam(e, TeamObj) {\n    deleteTeam(TeamObj._links.self.href.replace(\"http://localhost:9000\", \"\"))\n    alert(\"Deleted Team \" + TeamObj.team.name)\n}\n\n\n\n// App.js\nfunction Home(props) {\n        let history = useHistory();\n        const filteredState = filter(props.mlbStats, props.filterSection, props.filterBar, props.searchSection, props.searchBar, props.currentList, props.operator)\n        const sortedState = sort(filteredState, props.sortName, props.currentList)\n        return (\n            <div className=\"home\">\n                <div className=\"header\">\n\n               </div>\n                <button onClick={() => {history.push('/CreateTeam')}} className=\"formButton\">Create Team</button>\n                <div className=\"customContainer\">\n                    <div className=\"contentHeader\">\n                        <button onClick={() => {changeList(\"Standings\", props.mlbStats)}} className={\"contentButton \" + (props.currentList === \"Standings\" ? \"active\": \"\")}>Over View</button>\n                        <button onClick={() => {changeList(\"Batting\", props.mlbStats)}} className={\"contentButton \" + (props.currentList === \"Batting\" ? \"active\": \"\")}>Batting</button>\n                        <button onClick={() => {changeList(\"Pitching\", props.mlbStats)}} className={\"contentButton \" + (props.currentList === \"Pitching\" ? \"active\": \"\")}>Pitching</button>\n                        <button onClick={() => {changeList(\"Fielding\", props.mlbStats)}} className={\"contentButton \" + (props.currentList === \"Fielding\" ? \"active\": \"\")}>Fielding</button>\n                    </div>\n                    <div className=\"contentFilter\">\n                        <form className=\"Filter\">\n                            <div className=\"mx-auto form-row align-items-center\">\n                                <div className=\"col-lg-12 my-4\">\n                                    <div className=\"input-group mr-sm-2\">\n                                        <div className=\"input-group-prepend\">\n                                            <div className=\"input-group-text\">\n                                                <select onChange={(e) => {searchSection(e.target.value)}} className=\"custom-select mr-sm-2\" id=\"inlineFormCustomSelect\">\n                                                    <option value=\"city\" defaultValue>City</option>\n                                                    <option value=\"name\">Name</option>\n                                                    <option value=\"abbreviation\">Abbreviation</option>\n                                                </select>\n                                            </div>\n                                        </div>\n                                        <input onInput={(e) => {searchBar(e)}}  type=\"text\" className=\"form-control\" id=\"inlineFormInputGroupUsername\"/>\n                                    </div>\n                                </div>\n                            </div>\n                        </form>\n                        <form className=\"Filter\">\n                            <div className=\"mx-auto form-row align-items-center\">\n                                <div className=\"col-lg-12 my-4\">\n                                    <div className=\"input-group mr-sm-2\">\n                                        <div className=\"input-group-prepend\">\n                                            <div className=\"input-group-text\">\n                                                <select onChange={(e) => {filterSection(e.target.value)}} className=\"custom-select mr-sm-2\" id=\"inlineFormCustomSelect\">\n                                                    {(props.mlbStats.length > 0) ? options(props.mlbStats, props.currentList, props.filterSection) : null}\n                                                </select>\n                                            </div>\n                                        </div>\n                                        <div className=\"input-group-prepend\">\n                                            <div className=\"input-group-text\">\n                                                <select onChange={(e) => {changeOperator(e.target.value)}} className=\"custom-select mr-sm-2\" id=\"inlineFormCustomSelect\">\n                                                    <option value=\">\" defaultValue>{\">\"}</option>\n                                                    <option value=\"=\">=</option>\n                                                <option value=\"<\">{\"<\"}</option>\n                                                </select>\n                                            </div>\n                                        </div>\n                                        <input onKeyPress={(e) => {\n                                            if (isNaN(e.key)) e.preventDefault()\n                                        }} onInput={(e) => {filterBar(e)}} type=\"text\" className=\"form-control\" id=\"inlineFormInputGroupUsername\" defaultValue=\"0\"/>\n                                    </div>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                    <div className=\"ColumnContainer\">\n                        {(sortedState.length > 0) ? teams(genFields(sortedState, props.currentList), props.sortName) : null}\n                        <div className=\"Column\">\n                            <button className=\"contentButton\">\n                                Delete Team\n                            </button>\n                            {\n                                trashCans(sortedState)\n                            }\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n}\n\nconst mapStateToProps = state => ({\n    mlbStats: state.mlb_stats,\n    searchBar: state.search_bar,\n    searchSection: state.search_section,\n    sortName: state.sort_name,\n    filterBar: state.filter_bar,\n    filterSection: state.filter_section,\n    currentList: state.current_list,\n    operator: state.operator\n});\n\n//function lower case cammle case\n//\n\nconst mapDispatchToProps = {\n};\n\nconst HomeContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Home);\n\nexport default HomeContainer;\n","import React from 'react';\nimport '../stylesheets/form.css';\nimport '../stylesheets/bootstrap.css';\nimport { connect } from 'react-redux';\nimport { postTeam } from '../api.js';\nimport store from \"../store\";\nimport { useHistory } from \"react-router-dom\";\n\n\n\n\nfunction changeLosses(e) {\n    let val = parseInt(e.target.value)\n    if (isNaN(val) || val < 0) val = 0\n    store.dispatch({type: \"UPDATE_LOSSES\", text: val})\n    store.dispatch({type: \"UPDATE_AVG\"})\n}\nfunction changeWins(e) {\n    let val = parseInt(e.target.value)\n    if (isNaN(val) || val < 0) val = 0\n    store.dispatch({type: \"UPDATE_WINS\", text: val})\n    store.dispatch({type: \"UPDATE_AVG\"})\n}\n\nfunction processForm(e, history) {\n    e.preventDefault()\n    const ids = [\"inputCity\",\"inputName\",\"inputAbbreviation\",\"inputImgSrc\",\"inputTAB\",\"inputRuns\",\"inputHits\",\"inputARE\",\"inputIPI\",\"inputAH\",\"inputIPL\",\"inputTC\",\"inputFTO\",\"inputWins\",\"inputLosses\",\"inputWLP\"]\n    let values = {}\n    ids.map(id => {\n        const value = document.getElementById(id)\n        if (value.value === \"\") {\n            return document.getElementById(\"invalid\" + id).removeAttribute(\"hidden\")\n        } else {\n            return values[id] = value.value\n        }\n    })\n    if (Object.entries(values).length !== ids.length) return;\n        let json = {\n        \"team\": {\n            \"city\": values.inputCity,\n            \"name\": values.inputName,\n            \"abbreviation\": values.inputAbbreviation,\n            \"officialLogoImageSrc\": values.inputImgSrc\n        },\n        \"stats\": {\n            \"batting\": {\n                \"atBats\": values.inputTAB,\n                \"runs\": values.inputRuns,\n                \"hits\": values.inputHits\n            },\n            \"pitching\": {\n                \"earnedRunAvg\": values.inputARE,\n                \"inningsPitched\": values.inputIPI,\n                \"hitsAllowed\": values.inputAH\n            },\n            \"fielding\": {\n                \"inningsPlayed\": values.inputIPL,\n                \"totalChances\": values.inputTC,\n                \"fielderTagOuts\": values.inputFTO\n            },\n            \"standings\": {\n                \"wins\": values.inputWins,\n                \"losses\": values.inputLosses,\n                \"winPct\": values.inputWLP\n            }\n        }\n    }\n    postTeam(json)\n    history.push('/')\n}\n\n\n\n\n// App.js\nfunction Form(props) {\n        let history = useHistory();\n        return (\n            <div className=\"form\">\n                <div className=\"header\">\n               </div>\n                <div className=\"customContainer\">\n                    <div className=\"contentFilter\">\n                    </div>\n                    <form className=\"space\">\n                        <label htmlFor=\"formGroupExampleInput\" className=\"sectionLabel\">Team Info</label>\n                        <div className=\"form-row\">\n                            <div className=\"form-group col-md-4\">\n                                <label htmlFor=\"inputCity\">City</label>\n                                <input type=\"text\" className=\"form-control\" id=\"inputCity\"/>\n                                <div id=\"invalidinputCity\" className=\"invalid-feedback\" hidden>\n                                    Please choose a City.\n                                </div>\n                            </div>\n                            <div className=\"form-group col-md-4\">\n                                <label htmlFor=\"inputState\">Name</label>\n                                <input type=\"text\" className=\"form-control\" id=\"inputName\"/>\n                                <div id=\"invalidinputName\" className=\"invalid-feedback\" hidden>\n                                    Please choose a Name.\n                                </div>\n                            </div>\n                            <div className=\"form-group col-md-2\">\n                                <label htmlFor=\"inputZip\">Abbreviation</label>\n                                <input onKeyPress={(e) => {\n                                    if (e.target.value.length > 2) e.preventDefault()\n                                }} type=\"text\" className=\"form-control\" id=\"inputAbbreviation\"/>\n                                <div id=\"invalidinputAbbreviation\" className=\"invalid-feedback\" hidden>\n                                    Please choose a Abbreviation.\n                                </div>\n                            </div>\n                        </div>\n                        {/*<label htmlFor=\"inputPassword\" className=\"col-sm-2 col-form-label\">Image Source</label>*/}\n                        <div className=\"form-group row\">\n                            <div className=\"col-md-12\">\n                                <input type=\"text\" className=\"form-control\" id=\"inputImgSrc\"\n                                       placeholder=\"http://example.com\"/>\n                                <div id=\"invalidinputImgSrc\" className=\"invalid-feedback\" hidden>\n                                    Please choose a Image Source.\n                                </div>\n                            </div>\n                        </div>\n                        <label htmlFor=\"formGroupExampleInput\" className=\"sectionLabel\">Standings</label>\n                        <div className=\"form-row\">\n                            <div className=\"form-group col-md-4\">\n                                <label htmlFor=\"inputCity\">Wins</label>\n                                <input onKeyPress={(e) => {\n                                    if (isNaN(e.key)) e.preventDefault()\n                                }} onInput={(e) => {changeWins(e)}} type=\"text\" className=\"form-control\" id=\"inputWins\"/>\n                                <div id=\"invalidinputWins\" className=\"invalid-feedback\" hidden>\n                                    Please choose a Number of Wins.\n                                </div>\n                            </div>\n                            <div className=\"form-group col-md-4\">\n                                <label htmlFor=\"inputState\">Losses</label>\n                                <input onKeyPress={(e) => {\n                                    if (isNaN(e.key)) e.preventDefault()\n                                }} onInput={(e) => {changeLosses(e)}} type=\"text\" className=\"form-control\" id=\"inputLosses\"/>\n                                <div id=\"invalidinputLosses\" className=\"invalid-feedback\" hidden>\n                                    Please choose a Number of Losses.\n                                </div>\n                            </div>\n                            <div className=\"form-group col-md-4\">\n                                <label htmlFor=\"inputState\">Win Loss Percentage</label>\n                                <input value={props.FormAvg} type=\"text\" className=\"form-control\" id=\"inputWLP\" readOnly/>\n                                <div id=\"invalidinputWLP\" className=\"invalid-feedback\" hidden>\n                                    Please choose a Wins Loss Percentage.\n                                </div>\n                            </div>\n                        </div>\n                        <label htmlFor=\"formGroupExampleInput\" className=\"sectionLabel\">Batting</label>\n                        <div className=\"form-row\">\n                            <div className=\"form-group col-md-4\">\n                                <label htmlFor=\"inputCity\">Times at Bat</label>\n                                <input onKeyPress={(e) => {\n                                    if (isNaN(e.key)) e.preventDefault()\n                                }} type=\"text\" className=\"form-control\" id=\"inputTAB\"/>\n                                <div id=\"invalidinputTAB\" className=\"invalid-feedback\" hidden>\n                                    Please choose a Number of Times at Bat.\n                                </div>\n                            </div>\n                            <div className=\"form-group col-md-4\">\n                                <label htmlFor=\"inputState\">Runs</label>\n                                <input onKeyPress={(e) => {\n                                    if (isNaN(e.key)) e.preventDefault()\n                                }} type=\"text\" className=\"form-control\" id=\"inputRuns\"/>\n                                <div id=\"invalidinputRuns\" className=\"invalid-feedback\" hidden>\n                                    Please choose a Number of Runs.\n                                </div>\n                            </div>\n                            <div className=\"form-group col-md-4\">\n                                <label htmlFor=\"inputZip\">Hits</label>\n                                <input onKeyPress={(e) => {\n                                    if (isNaN(e.key)) e.preventDefault()\n                                }} type=\"text\" className=\"form-control\" id=\"inputHits\"/>\n                                <div id=\"invalidinputHits\" className=\"invalid-feedback\" hidden>\n                                    Please choose a Number of Hits.\n                                </div>\n                            </div>\n                        </div>\n                        <label htmlFor=\"formGroupExampleInput\" className=\"sectionLabel\">Pitching</label>\n                        <div className=\"form-row\">\n                            <div className=\"form-group col-md-4\">\n                                <label htmlFor=\"inputCity\">Average Runs Earned</label>\n                                <input onKeyPress={(e) => {\n                                    if (isNaN(e.key)) e.preventDefault()\n                                }} type=\"text\" className=\"form-control\" id=\"inputARE\"/>\n                                <div id=\"invalidinputARE\" className=\"invalid-feedback\" hidden>\n                                    Please choose a Number of Average Runs Earned.\n                                </div>\n                            </div>\n                            <div className=\"form-group col-md-4\">\n                                <label htmlFor=\"inputState\">Innings Pitched</label>\n                                <input onKeyPress={(e) => {\n                                    if (isNaN(e.key)) e.preventDefault()\n                                }} type=\"text\" className=\"form-control\" id=\"inputIPI\"/>\n                                <div id=\"invalidinputIPI\" className=\"invalid-feedback\" hidden>\n                                    Please choose a Number of Innings Pitched.\n                                </div>\n                            </div>\n                            <div className=\"form-group col-md-4\">\n                                <label htmlFor=\"inputZip\">Allowed Hits</label>\n                                <input onKeyPress={(e) => {\n                                    if (isNaN(e.key)) e.preventDefault()\n                                }} type=\"text\" className=\"form-control\" id=\"inputAH\"/>\n                                <div id=\"invalidinputAH\" className=\"invalid-feedback\" hidden>\n                                    Please choose a Number of Allowed Hits.\n                                </div>\n                            </div>\n                        </div>\n                        <label htmlFor=\"formGroupExampleInput\" className=\"sectionLabel\">Fieldings</label>\n                        <div className=\"form-row\">\n                            <div className=\"form-group col-md-4\">\n                                <label htmlFor=\"inputCity\">Innings Played</label>\n                                <input onKeyPress={(e) => {\n                                    if (isNaN(e.key)) e.preventDefault()\n                                }} type=\"text\" className=\"form-control\" id=\"inputIPL\"/>\n                                <div id=\"invalidinputIPL\" className=\"invalid-feedback\" hidden>\n                                    Please choose a Number of Innings Played.\n                                </div>\n                            </div>\n                            <div className=\"form-group col-md-4\">\n                                <label htmlFor=\"inputState\">Total Chances</label>\n                                <input onKeyPress={(e) => {\n                                    if (isNaN(e.key)) e.preventDefault()\n                                }} type=\"text\" className=\"form-control\" id=\"inputTC\"/>\n                                <div id=\"invalidinputTC\" className=\"invalid-feedback\" hidden>\n                                    Please choose a Number of Total Chances.\n                                </div>\n                            </div>\n                            <div className=\"form-group col-md-4\">\n                                <label htmlFor=\"inputZip\">Fielder Tag Outs</label>\n                                <input onKeyPress={(e) => {\n                                    if (isNaN(e.key)) e.preventDefault()\n                                }} type=\"text\" className=\"form-control\" id=\"inputFTO\"/>\n                                <div id=\"invalidinputFTO\" className=\"invalid-feedback\" hidden>\n                                    Please choose a Number of Fielder Tag Outs.\n                                </div>\n                            </div>\n                        </div>\n                        <button onClick={(e) => {processForm(e, history)}} type=\"sumbit\" className=\"btn btn-primary\">Create Team</button>\n                    </form>\n                </div>\n            </div>\n        );\n}\n\nconst mapStateToProps = state => ({\n    mlbStats: state.mlb_stats,\n    CurrentList: state.current_list,\n    FormAvg: state.form_avg\n});\n\nconst mapDispatchToProps = {\n};\n\nconst FormContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Form);\n\nexport default FormContainer;\n","import React, { Component } from 'react';\nimport HomeContainer from '../src/components/home.js';\nimport FormContainer from '../src/components/form.js';\nimport {\n    Switch,\n    Route\n} from \"react-router-dom\";\n\nclass App extends Component {\n\n    render() {\n        return (\n            <div className = \"App\">\n                <header className = \"App-header\">\n                    <Switch>\n                        <Route path=\"/CreateTeam\">\n                            <FormContainer/>\n                        </Route>\n                        <Route path=\"/\">\n                            <HomeContainer/>\n                        </Route>\n                    </Switch>\n                </header>\n            </div>\n        );\n    }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app.js';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './store.js'\nimport { BrowserRouter } from \"react-router-dom\";\nimport {getAllTeams} from \"./api\";\n\ngetAllTeams()\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\"/>\n      <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\"/>\n      <Provider store={store}>\n          <BrowserRouter>\n            <App/>\n          </BrowserRouter>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}