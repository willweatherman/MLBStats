{"ast":null,"code":"import { createStore } from 'redux';\n\nfunction todos(state = {}, action) {\n  switch (action.type) {\n    case 'UPDATE_STATE':\n      console.log(action.state);\n      state.ToDoList = action.state.ToDoList;\n      state.ToDoObject = action.state.ToDoObject;\n      state.CurrentList = action.state.CurrentList;\n      return state;\n\n    case 'CHANGE_LIST':\n      state.CurrentList = action.text;\n      return state;\n\n    default:\n      return state;\n  }\n}\n\nlet store = createStore(todos, {\n  ToDoObject: {\n    \"ONE\": [\"HIYA\", \"HELLLOOOO\"],\n    \"TWO\": [\"BYEYA\", \"GOODBYEE\"]\n  },\n  ToDoList: [\"ONE\", \"TWO\"],\n  CurrentList: \"TWO\"\n});\n\nvar getTasks = () => {\n  fetch('/Tasks').then(response => {\n    return response.json();\n  }).then(data => {\n    console.log(data);\n    let obj = {};\n    let arr = [];\n\n    const Tasks = data._embedded.Tasks.map(task => {\n      console.log(task);\n      obj[task.name] = task.tasks;\n      arr = arr.concat(task.name);\n      console.log(arr);\n    });\n\n    const newstate = {\n      ToDoObject: obj,\n      ToDoList: arr,\n      CurrentList: arr[0]\n    };\n    console.log(newstate);\n    store.dispatch({\n      type: \"UPDATE_STATE\",\n      state: newstate\n    });\n  });\n};\n\ngetTasks();\nexport default store;","map":{"version":3,"sources":["/Users/willweatherman/gs-accessing-mongodb-data-rest/ui/src/store.js"],"names":["createStore","todos","state","action","type","console","log","ToDoList","ToDoObject","CurrentList","text","store","getTasks","fetch","then","response","json","data","obj","arr","Tasks","_embedded","map","task","name","tasks","concat","newstate","dispatch"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;;AAEA,SAASC,KAAT,CAAeC,KAAK,GAAG,EAAvB,EAA2BC,MAA3B,EAAmC;AAC/B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,cAAL;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACD,KAAnB;AACAA,MAAAA,KAAK,CAACK,QAAN,GAAiBJ,MAAM,CAACD,KAAP,CAAaK,QAA9B;AACAL,MAAAA,KAAK,CAACM,UAAN,GAAmBL,MAAM,CAACD,KAAP,CAAaM,UAAhC;AACAN,MAAAA,KAAK,CAACO,WAAN,GAAoBN,MAAM,CAACD,KAAP,CAAaO,WAAjC;AACA,aAAOP,KAAP;;AACJ,SAAK,aAAL;AACIA,MAAAA,KAAK,CAACO,WAAN,GAAoBN,MAAM,CAACO,IAA3B;AACA,aAAOR,KAAP;;AACJ;AACI,aAAOA,KAAP;AAXR;AAaH;;AACD,IAAIS,KAAK,GAAGX,WAAW,CAACC,KAAD,EAAQ;AAC3BO,EAAAA,UAAU,EAAC;AACP,WAAO,CAAC,MAAD,EAAS,WAAT,CADA;AAEP,WAAO,CAAC,OAAD,EAAU,UAAV;AAFA,GADgB;AAK3BD,EAAAA,QAAQ,EAAC,CAAC,KAAD,EAAQ,KAAR,CALkB;AAM3BE,EAAAA,WAAW,EAAE;AANc,CAAR,CAAvB;;AAQA,IAAIG,QAAQ,GAAG,MAAM;AACjBC,EAAAA,KAAK,CAAC,QAAD,CAAL,CAAgBC,IAAhB,CAAsBC,QAAD,IAAc;AAAE,WAAOA,QAAQ,CAACC,IAAT,EAAP;AAAyB,GAA9D,EAAgEF,IAAhE,CAAsEG,IAAD,IAAU;AAC3EZ,IAAAA,OAAO,CAACC,GAAR,CAAYW,IAAZ;AACA,QAAIC,GAAG,GAAG,EAAV;AACA,QAAIC,GAAG,GAAG,EAAV;;AACA,UAAMC,KAAK,GAAGH,IAAI,CAACI,SAAL,CAAeD,KAAf,CAAqBE,GAArB,CAAyBC,IAAI,IAAI;AAC3ClB,MAAAA,OAAO,CAACC,GAAR,CAAYiB,IAAZ;AACAL,MAAAA,GAAG,CAACK,IAAI,CAACC,IAAN,CAAH,GAAiBD,IAAI,CAACE,KAAtB;AACAN,MAAAA,GAAG,GAAGA,GAAG,CAACO,MAAJ,CAAWH,IAAI,CAACC,IAAhB,CAAN;AACAnB,MAAAA,OAAO,CAACC,GAAR,CAAYa,GAAZ;AACH,KALa,CAAd;;AAMA,UAAMQ,QAAQ,GAAG;AACbnB,MAAAA,UAAU,EAAEU,GADC;AAEbX,MAAAA,QAAQ,EAAEY,GAFG;AAGbV,MAAAA,WAAW,EAAEU,GAAG,CAAC,CAAD;AAHH,KAAjB;AAKAd,IAAAA,OAAO,CAACC,GAAR,CAAYqB,QAAZ;AACAhB,IAAAA,KAAK,CAACiB,QAAN,CAAe;AAACxB,MAAAA,IAAI,EAAE,cAAP;AAAuBF,MAAAA,KAAK,EAAEyB;AAA9B,KAAf;AACH,GAjBD;AAkBH,CAnBD;;AAoBAf,QAAQ;AAGR,eAAeD,KAAf","sourcesContent":["import { createStore } from 'redux'\n\nfunction todos(state = {}, action) {\n    switch (action.type) {\n        case 'UPDATE_STATE':\n            console.log(action.state)\n            state.ToDoList = action.state.ToDoList\n            state.ToDoObject = action.state.ToDoObject\n            state.CurrentList = action.state.CurrentList\n            return state\n        case 'CHANGE_LIST':\n            state.CurrentList = action.text\n            return state\n        default:\n            return state\n    }\n}\nlet store = createStore(todos, {\n    ToDoObject:{\n        \"ONE\": [\"HIYA\", \"HELLLOOOO\"],\n        \"TWO\": [\"BYEYA\", \"GOODBYEE\"]\n    },\n    ToDoList:[\"ONE\", \"TWO\"],\n    CurrentList: \"TWO\"\n})\nvar getTasks = () => {\n    fetch('/Tasks').then((response) => { return response.json(); }).then((data) => {\n        console.log(data);\n        let obj = {}\n        let arr = []\n        const Tasks = data._embedded.Tasks.map(task => {\n            console.log(task)\n            obj[task.name] = task.tasks\n            arr = arr.concat(task.name)\n            console.log(arr)\n        })\n        const newstate = {\n            ToDoObject: obj,\n            ToDoList: arr,\n            CurrentList: arr[0]\n        }\n        console.log(newstate)\n        store.dispatch({type: \"UPDATE_STATE\", state: newstate})\n    });\n}\ngetTasks()\n\n\nexport default store\n"]},"metadata":{},"sourceType":"module"}